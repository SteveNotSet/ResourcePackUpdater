import groovy.json.JsonSlurper
import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'fabric-loom' version '1.7-SNAPSHOT'
    id "de.undercouch.download" version "4.1.2"
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

String default_minecraft_version = "1.16.5"
Properties localProperties = new Properties()
String minecraft_version
if (project.rootProject.file('build.properties').exists()) {
    localProperties.load(project.rootProject.file('build.properties').newDataInputStream())
}
if (localProperties.containsKey("MC_VERSION")) {
    String notDotted = localProperties.get("MC_VERSION")
    String dotted = notDotted.substring(0, 1) + "." +
            Integer.toString(Integer.parseInt(notDotted.substring(1, 3))) + "." +
            Integer.toString(Integer.parseInt(notDotted.substring(3, 5)))
    minecraft_version = dotted
} else {
    minecraft_version = rootProject.properties.containsKey("buildVersion") ? rootProject.properties.get("buildVersion") : default_minecraft_version
}
int minecraft_main_version = minecraft_version.split("\\.")[1] as int
String minecraft_version_int = minecraft_version.split("\\.")[0] +
        minecraft_version.split("\\.")[1].padLeft(2, '0') +
        (minecraft_version.split("\\.").length > 2 ? minecraft_version.split("\\.")[2].padLeft(2, '0') : "00")
boolean is_1_19_3 = minecraft_version == "1.19.3"
String parchment_version = is_1_19_3 ? "N/A" : new XmlSlurper().parse("https://ldtteam.jfrog.io/artifactory/parchmentmc-internal/org/parchmentmc/data/parchment-${minecraft_version}/maven-metadata.xml").versioning.release


rootProject.ext.fabric_loader_version = new JsonSlurper().parse(("https://meta.fabricmc.net/v2/versions/loader/" + minecraft_version).toURL())[0]["loader"]["version"]
rootProject.ext.forge_version = minecraft_version + "-" + new JsonSlurper().parse(("https://files.minecraftforge.net/net/minecraftforge/forge/promotions_slim.json").toURL())["promos"][minecraft_version + "-latest"]
rootProject.ext.fabric_api_version = getModrinthVersion("fabric", minecraft_version, "fabric-api")
rootProject.ext.mod_menu_version = getModrinthVersion("fabric", minecraft_version, "modmenu")

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    maven {
        name = "TerraformersMC"
        url = uri("https://maven.terraformersmc.com/releases")
    }
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    annotationProcessor 'systems.manifold:manifold-preprocessor:2023.1.0'
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings is_1_19_3 ? loom.officialMojangMappings() : loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${minecraft_version}:${parchment_version}@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

    modImplementation ("com.terraformersmc:modmenu:${project.mod_menu_version}") {
        transitive = false
    }
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 16
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (minecraft_main_version == 16) {
        def targetVersion = 8
        if (JavaVersion.current().isJava9Compatible()) {
            options.release.set(targetVersion)
        }
    } else if (minecraft_main_version == 17) {
        options.release.set(16)
    } else {
        options.release.set(17)
    }
    options.compilerArgs += ['-Xplugin:Manifold', '-AMC_VERSION=' + minecraft_version_int]
}


task setupFiles() {
    download {
        src "https://github.com/jonafanho/Minecraft-Mappings/archive/refs/heads/1.${minecraft_main_version}${is_1_19_3 ? ".3" : ""}.zip"
        dest "src/main/java/cn/zbx1425/resourcepackupdater/mappings/files.zip"
        overwrite true
    }

    copy {
        outputs.upToDateWhen { false }
        from (zipTree("src/main/java/cn/zbx1425/resourcepackupdater/mappings/files.zip").matching {
                include "**/Text.java"
            }){ eachFile { file -> file.relativePath = new RelativePath(true, file.relativePath.segments.drop(1) as String[]) } }
        into "src/main/java/cn/zbx1425/resourcepackupdater/mappings"
        filter(ReplaceTokens, tokens: ["package": "cn.zbx1425.resourcepackupdater.mappings"])
    }

    ant.delete(file: "src/main/java/cn/zbx1425/resourcepackupdater/mappings/files.zip")
    ant.delete(dir: "src/main/java/cn/zbx1425/resourcepackupdater/mappings/Minecraft-Mappings-1.${minecraft_main_version}${is_1_19_3 ? ".3" : ""}")
}

afterEvaluate {
    rootProject.tasks.build.dependsOn rootProject.tasks.setupFiles
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name + "-" + minecraft_version
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

static def getModrinthVersion(loader, minecraftVersion, projectId) {
    def versionsArray = new JsonSlurper().parse(("https://api.modrinth.com/v2/project/" + projectId + "/version").toURL())
    for (def versionElement : versionsArray) {
        if (versionElement["loaders"].contains(loader) && versionElement["game_versions"].contains(minecraftVersion)) {
            return versionElement["version_number"]
        }
    }
    return ""
}

static def getParchmentVersion(minecraftVersion) {
    def url = "https://ldtteam.jfrog.io/artifactory/parchmentmc-internal/org/parchmentmc/data/parchment-" + minecraftVersion + "/maven-metadata.xml"
    def data = new XmlParser().parse(url)
    return data.versioning.latest.text()
}
